{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>This is just a placeholder file for the webpage re-direct. All the content for this section is actually in the <code>introduction.md</code> file.</p>"},{"location":"arduino_example/","title":"Arduino Example","text":"<p>Now that we've installed the Arduino library, it's time to upload our first sketch to make sure everything is working properly.</p>"},{"location":"arduino_example/#example-1","title":"Example 1","text":"<p>This first example just does some basic measurements. To find Example 1, go to File &gt; Examples &gt; SparkFun Qwiic Ultrasonic Arduino Library &gt; Example1_BasicReadings:</p> <p></p> <p>Finding Example 1</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch:</p> Example 1 Arduino Code <pre><code>/* SparkFun Ulrasonic Distance Sensor - Example 1 Basic Distance Sensing\n * \n * Product: \n *  *  SparkFun Qwiic Ultrasonic Distance Sensor - HC-SR04 (SEN-1XXXX)\n *  *  https://www.sparkfun.com/1XXXX\n * \n * Written By: Elias Santistevan\n * Date: 06/2024\n *\n * SPDX-License-Identifier: MIT\n *\n * Copyright (c) 2024 SparkFun Electronics\n */\n\n#include \"SparkFun_Qwiic_Ultrasonic_Arduino_Library.h\"\n\n// Create an ultrasonic sensor object\nQwiicUltrasonic myUltrasonic;\n\n// Here we set the device address. Note that an older version of the Qwiic\n// Ultrasonic firmware used a default address of 0x00. If yours uses 0x00,\n// you'll need to change the address below. It is also recommended to run\n// Example 2 to change the address to the new default.\nuint8_t deviceAddress = kQwiicUltrasonicDefaultAddress; // 0x2F\n// uint8_t deviceAddress = 0x00;\n\nvoid setup()\n{\n  // Start serial\n  Serial.begin(115200);\n  Serial.println(\"Ultrasonic Distance Sensor Example 1 - Basic Readings\");\n\n  Wire.begin();\n\n  // Attempt to begin the sensor\n  while (myUltrasonic.begin(deviceAddress) == false)\n  {\n    Serial.println(\"Ultrasonic sensor not connected, check your wiring and I2C address!\");\n    delay(2000);\n  }\n\n  Serial.println(\"Ultrasonic sensor connected!\");\n}\n\nvoid loop()\n{\n  uint16_t distance = 0;\n  myUltrasonic.triggerAndRead(distance);\n\n  // Print measurement\n  Serial.print(\"Distance (mm): \");\n  Serial.println(distance);\n\n  //Serial.println(\"Distance (cm): \"); \n  //Serial.print((distance / 10.0), 2);         \n\n  //Serial.println(\"Distace (in): \"); \n  //Serial.print((distance / 25.4), 2);         \n\n  // Wait a bit\n  delay(250);\n}\n</code></pre> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following.</p> <p></p> <p>Example 1 Output</p> <p>Note the output change when the mouse is moved closer to the sensor.</p>"},{"location":"arduino_example/#example-2","title":"Example 2","text":"<p>Let's add in an LCD screen to display our measurements. For this example you will need another Qwiic Cable and the SparkFun Qwiic OLED Display (0.91 in., 128x32).</p> <p>To display the sensor readings on the connected Qwiic OLED, we will need to install the SparkFun Qwiic OLED library. You can install this library to automatically in the Arduino IDE's Library Manager by searching for \"SparkFun Qwiic OLED\". Or you can manually download it from the GitHub repository.</p> <p> Download the SparkFun Qwiic OLED Library (ZIP) </p> <p>To find Example 2, go to File &gt; Examples &gt; SparkFun Qwiic Ultrasonic Arduino Library &gt; Example2_OLED_Distance:</p> <p></p> <p>Finding Example 2</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch:</p> Example 2 Arduino Code <pre><code>/* SparkFun Ulrasonic Distance Sensor - Example 2 Basic Distance Sensing on an OLED Display\n * \n * Products: \n *  *  SparkFun Qwiic Ultrasonic Distance Sensor - HC-SR04 (SEN-1XXXX)\n *  *  https://www.sparkfun.com/1XXXX\n *  *  SparkFun Qwiic Narrow OLED Display (LCD-1XXXX)\n *  *  https://www.sparkfun.com/1XXXX\n *\n * Link to OLED library: https://github.com/sparkfun/SparkFun_Qwiic_OLED_Arduino_Library\n * \n * Written By: Elias Santistevan\n * Date: 06/2024\n *\n * SPDX-License-Identifier: MIT\n *\n * Copyright (c) 2024 SparkFun Electronics\n */\n\n#include \"SparkFun_Qwiic_OLED.h\"\n// For the narrow LED, I prefer the slightly larger font included in the OLED library.\n// This is completely optional and can be deleted or commented out. By default the font\n// is slightly smaller. \n#include \"res/qw_fnt_8x16.h\"\n#include \"SparkFun_Qwiic_Ultrasonic_Arduino_Library.h\"\n\n// Create an ultrasonic sensor object\nQwiicUltrasonic myUltrasonic;\n// Creat an OLED object\nQwiicNarrowOLED myOLED;\n\nchar distanceBuff[4] = {}; \nString distanceStr = \"\";\nint centerX; \nint centerY; \n\n// Here we set the device address. Note that an older version of the Qwiic\n// Ultrasonic firmware used a default address of 0x00. If yours uses 0x00,\n// you'll need to change the address below. It is also recommended to run\n// Example 2 to change the address to the new default.\nuint8_t deviceAddress = kQwiicUltrasonicDefaultAddress; // 0x2F\n// uint8_t deviceAddress = 0x00;\n\nvoid setup()\n{\n\n  Serial.begin(115200); // Default config settings\n  Serial.println(\"Ultrasonic Distance Sensor - Example 4 - Distance on an OLED Display\");\n  Wire.begin();\n\n  while (myOLED.begin() == false) {\n    Serial.println(\"OLED sensor not connected, check your wiring and I2C address!\");\n    delay(1000);\n  }\n  while(myUltrasonic.begin(deviceAddress) == false)\n  {\n    Serial.println(\"Ultrasonic sensor not connected, check your wiring and I2C address!\");\n    delay(1000);\n  }\n\n  String hello = \"Hello, Ultrasonic!\";\n\n  // This is good for the narrow OLED screen. You can also just remove this \n  // and it will default to a slightly smaller font. \n  myOLED.setFont(QW_FONT_8X16);\n\n  // This will center the text onto the screen. \n  int x0 = (myOLED.getWidth() - myOLED.getStringWidth(hello)) / 2;\n  int y0 = (myOLED.getHeight() - myOLED.getStringHeight(hello)) / 2;\n\n  myOLED.text(x0, y0, hello);\n\n  // There's nothing on the screen yet - Now send the graphics to the device\n  myOLED.display();\n  delay(2000);\n}\n\nvoid loop() \n{\n  uint16_t distance = 0;\n  myUltrasonic.triggerAndRead(distance);\n\n  // Convert distance, which is an integer, to char so that we can print it.\n  snprintf(distanceBuff, 6, \"%d\", distance);\n\n  // Put the distance in a string so that we can also print \"mm\".\n  distanceStr = distanceBuff; \n  distanceStr += \"mm\";\n\n  myOLED.erase();\n  centerX = (myOLED.getWidth() - myOLED.getStringWidth(distanceStr)) / 2;\n  centerY = (myOLED.getHeight() - myOLED.getStringHeight(distanceStr)) / 2;\n  myOLED.text(centerX, centerY, distanceStr);\n  myOLED.display();\n\n  delay(250);\n}\n</code></pre> <p>We have code, now let's hookup the hardware! The Qwiic system makes this example quite literally plug and play. Use Qwiic cables to make your hardware setup look like this:</p> <p></p> <p>Example 2 Hardware Hookup</p> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, you should see something similar to the following.</p> <p></p> <p>Run away!</p> <p>Try moving an object (like your hand or a dinosaur) closer to the sensor - notice the output of the OLED shows you how close the object is! Grr. Rawr!</p>"},{"location":"arduino_example/#going-further","title":"Going Further","text":"<p>There are more examples in the Arduino Library that allow you to change the I<sup>2</sup>C address or use the Trigger and Echo Pins. Feel free to check them out!</p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":"<p>Using the Qwiic system, assembling the hardware is simple. Connect the RedBoard to one of the Ultrasonic Distance Sensor Qwiic ports using your Qwiic cables. Then connect the RedBoard to your computer via the MicroUSB cable and voila! You're ready to rock! </p> <p></p> <p>Ultrasonic Distance Sensor Connected to Programming</p> <p>If you don't want to use the Qwiic system, there are Plated Through Holes on the side of the board that you can solder headers to. </p> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide.</p> <ul> <li> <p> <p>How to Solder: Through-Hole Soldering</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>Overall Features:</p> <ul> <li>Operating Voltage 3.3V</li> <li>Detecting Angle: 80 degrees</li> <li>Sensor range: 2cm to 400cm</li> <li>MCU on board: STM8L051F3</li> <li>7 bit Unshifted Address: 0x2F</li> <li>Dimensions: 1.75\" x 0.85\"</li> </ul>"},{"location":"hardware_overview/#stm8l051f3-mcu","title":"STM8L051F3 MCU","text":"<p>The 8-bit ultra-low power STM8 MCU Core provides increased processing power (up to 16 MIPS at 16 MHz) while maintaining the advantages of a CISC architecture with improved code density, a 24-bit linear addressing space and an optimized architecture for low power operations. It also features embedded data EEPROM and low power, low-voltage, single-supply program Flash memory. The device incorporates an extensive range of enhanced I/Os and peripherals, a 12-bit ADC, a real-time clock, two 16-bit timers, one 8-bit timer, as well as standard communication interfaces such as an SPI, an I<sup>2</sup>C interface, and one USART. For more information, refer to the datasheet.</p> <p></p> <p>STM8L051F3 MCU</p>"},{"location":"hardware_overview/#tct40-16rt","title":"TCT40-16R/T","text":"<p>The TCT40-16R and TCT40-16T are an analog ultrasonic receiver and transmitter featuring a distance range from 2cm to 400cm meters and a beam angle of 80\u00b0. We've attached an RS232 transceiver to the transmitter to boost the signal being sent out, and the receiver goes through an LMV324 op-amp to clean up the signal coming in for optimum detection. For more information, refer to the translated datasheet here.</p> <p></p> <p>TCT40-16R/T</p>"},{"location":"hardware_overview/#qwiic-connectors","title":"Qwiic connectors","text":"<p>Our Qwiic Ecosystem makes sensors pretty much plug and play. There are two Qwiic connectors on the side of the Qwiic Distance Sensor board to provide power and I<sup>2</sup>C connectivity simultaneously. The default I<sup>2</sup>C address is 0x2F. The <code>updateAddress()</code> function allows you to change the I<sup>2</sup>C address to any address from 0x08 to 0x7F. More information on our Qwiic Ecosystem can be found here.  </p> <p></p> <p>Qwiic connectors</p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>Ideally, power will be supplied via the Qwiic connectors on either side of the board. Alternatively, power can be supplied through the pins along the bottom side of the board labeled <code>3V3</code> and <code>GND</code>. The input voltage range should be between 1.8-3.6V. </p> <p></p> <p>Power Pins</p>"},{"location":"hardware_overview/#trigger-and-echo-pins","title":"Trigger and Echo Pins","text":"<p>The Trigger and Echo pins are available as plated through holes to manually calculate the distance using the Ultrasonic Distance Sensor. To use, pull TRIG HIGH and then LOW, wait for the ECHO pin to go HIGH and then take the time in between to calculate the distance to the object. For more information on how this works, check out Example 3 in the Arduino Library. </p> <p></p> <p>Trigger and Echo Pins</p>"},{"location":"hardware_overview/#testpoint-pads","title":"Testpoint Pads","text":"<p>We've provided a number of open pads on the back of the board:</p>"},{"location":"hardware_overview/#i2c-pads","title":"I2C Pads","text":"<p>Should you wish to avoid using the Qwiic connectors, you can use these two pads (along with the power PTH pins) to still take advantage of the I<sup>2</sup>C communication protocols. </p> <p></p> <p>I<sup>2</sup>C Testpoint Pads</p>"},{"location":"hardware_overview/#single-wire-interface-module-swim","title":"Single Wire Interface Module (SWIM)","text":"<p>SWIM, INT, and NRST are all part of the \"Single Wire Interface Module (SWIM)\" used for programming the onboard STM8 microcontroller and for most users, can be effectively ignored. For those who wish to dive into the deep end and tweak the firmware, these pads are available. Requirements include ST Visual Develop (the ST Progamming Software bundled with Visual Develop), a COSMIC compiler license, and a USB to SWIM adapter.</p> <p></p> <p>SWIM Testpoint Pads</p>"},{"location":"hardware_overview/#addr_rst","title":"ADDR_RST","text":"<p>ADDR_RST resets the address to 0x2F. </p> <p></p> <p>ADDR_RST Testpoint Pad</p>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p>      How to Work with Jumper Pads and PCB Traces </p></p>"},{"location":"hardware_overview/#led-jumper","title":"LED Jumper","text":"<p>If you are concerned about power consumption, need to run dark, or you just don't like LEDs, cut the traces here to disconnect the Power LED from, you guessed it, power. </p> <p></p> <p>LED Jumper</p>"},{"location":"hardware_overview/#i2c","title":"I<sup>2</sup>C","text":"<p>The Qwiic Ultrasonic Distance Sensor has built-in 2.2k pull-up resistors on the SDA and SCL lines. These are needed for normal I<sup>2</sup>C communication. The I<sup>2</sup>C jumper has two small traces connecting the pull-ups to 3.3V. For general use you can leave this jumper unmodified. If you have many (over 7) devices on the I<sup>2</sup>C bus, each with their own pull up resistors, then you may want to cut the I<sup>2</sup>C jumpers to disconnect the 2.2k resistors on each Qwiic board.</p> <p></p> <p>I<sup>2</sup>C jumper</p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board dimensions are illustrated in the drawing below; the listed measurements are in inches.</p> <p></p> <p>SparkFun Ultrasonic Sensor Board Dimensions</p> Need more measurements? <p>For more information about the board's dimensions, users can download the Eagle files. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download fromAutodesk primary logo </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"introduction/","title":"Introduction","text":"<ul> <li> <p> SparkFun Ultrasonic Distance Sensor - TCT40 (Qwiic) SKU: SEN-24805 <p> </p> <li> <p>The SparkFun Qwiic Ultrasonic Distance Sensor, a user-friendly upgrade to the popular HC-SR04 sensor, offers non-contact distance measurement from 2cm to 400cm with an accuracy of 3mm. This sensor is designed to seamlessly integrate with the Qwiic ecosystem for I<sup>2</sup>C communication, making it a breeze to add to your existing projects and daisy-chain with other Qwiic components.</p> <p>With its wide range of applications, the SparkFun Qwiic Ultrasonic Distance Sensor is a versatile tool for robotics projects, obstacle avoidance systems, and any application that requires accurate distance measurement without physical contact. Its adaptability makes it a valuable addition to your toolkit.</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> SparkFun Ultrasonic Distance Sensor - TCT40(Qwiic)              SEN-24805          USB micro-B Cable - 6 Foot              CAB-10215          Qwiic Cable - 100mm              PRT-14427          SparkFun RedBoard Qwiic              DEV-15123"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>Below are a few tutorials that may help users familiarize themselves with various aspects of the board.</p> <ul> <li> <p> How to Solder: Through-Hole Soldering </p> </li> <li> <p> I2C </p> </li> <li> <p> Serial Terminal Basics </p> </li> </ul> <p> <p></p> <p>The SparkFun Ultrasonic Distance Sensor - TCT40 (Qwiic) takes advantage of the Qwiic connect system. We recommend familiarizing yourself with the Logic Levels and I<sup>2</sup>C tutorials.  Click on the banner above to learn more about Qwiic products.</p> <p> </p>"},{"location":"resources/","title":"Resources","text":"<p>For more resources related to the SparkFun Ultrasonic Distance Sensor - TCT40 (Qwiic), check out the links listed here: </p> <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PDF)</li> <li>Component Documentation<ul> <li>STM8L051F3 MCU Datasheet (PDF)</li> <li>TCT40-16R/T Datasheet (PDF)</li> <li>RS232 transceiver Datasheet (PDF)</li> </ul> </li> <li>Arduino Library GitHub Repository</li> <li>GitHub Hardware Respository</li> </ul>"},{"location":"single_page/","title":"Single page","text":"<ul> <li> <p> SparkFun Ultrasonic Distance Sensor - TCT40 (Qwiic) SKU: SEN-24805 <p> </p> <li> <p>The SparkFun Qwiic Ultrasonic Distance Sensor, a user-friendly upgrade to the popular HC-SR04 sensor, offers non-contact distance measurement from 2cm to 400cm with an accuracy of 3mm. This sensor is designed to seamlessly integrate with the Qwiic ecosystem for I<sup>2</sup>C communication, making it a breeze to add to your existing projects and daisy-chain with other Qwiic components.</p> <p>With its wide range of applications, the SparkFun Qwiic Ultrasonic Distance Sensor is a versatile tool for robotics projects, obstacle avoidance systems, and any application that requires accurate distance measurement without physical contact. Its adaptability makes it a valuable addition to your toolkit.</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> SparkFun Ultrasonic Distance Sensor - TCT40(Qwiic)              SEN-24805          USB micro-B Cable - 6 Foot              CAB-10215          Qwiic Cable - 100mm              PRT-14427          SparkFun RedBoard Qwiic              DEV-15123"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>Below are a few tutorials that may help users familiarize themselves with various aspects of the board.</p> <ul> <li> <p> How to Solder: Through-Hole Soldering </p> </li> <li> <p> I2C </p> </li> <li> <p> Serial Terminal Basics </p> </li> </ul> <p> <p></p> <p>The SparkFun Ultrasonic Distance Sensor - TCT40 (Qwiic) takes advantage of the Qwiic connect system. We recommend familiarizing yourself with the Logic Levels and I<sup>2</sup>C tutorials.  Click on the banner above to learn more about Qwiic products.</p> <p> </p>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>Overall Features:</p> <ul> <li>Operating Voltage 3.3V</li> <li>Detecting Angle: 80 degrees</li> <li>Sensor range: 2cm to 400cm</li> <li>MCU on board: STM8L051F3</li> <li>7 bit Unshifted Address: 0x2F</li> <li>Dimensions: 1.75\" x 0.85\"</li> </ul>"},{"location":"single_page/#stm8l051f3-mcu","title":"STM8L051F3 MCU","text":"<p>The 8-bit ultra-low power STM8 MCU Core provides increased processing power (up to 16 MIPS at 16 MHz) while maintaining the advantages of a CISC architecture with improved code density, a 24-bit linear addressing space and an optimized architecture for low power operations. It also features embedded data EEPROM and low power, low-voltage, single-supply program Flash memory. The device incorporates an extensive range of enhanced I/Os and peripherals, a 12-bit ADC, a real-time clock, two 16-bit timers, one 8-bit timer, as well as standard communication interfaces such as an SPI, an I<sup>2</sup>C interface, and one USART. For more information, refer to the datasheet.</p> <p></p> <p>STM8L051F3 MCU</p>"},{"location":"single_page/#tct40-16rt","title":"TCT40-16R/T","text":"<p>The TCT40-16R and TCT40-16T are an analog ultrasonic receiver and transmitter featuring a distance range from 2cm to 400cm meters and a beam angle of 80\u00b0. We've attached an RS232 transceiver to the transmitter to boost the signal being sent out, and the receiver goes through an LMV324 op-amp to clean up the signal coming in for optimum detection. For more information, refer to the translated datasheet here.</p> <p></p> <p>TCT40-16R/T</p>"},{"location":"single_page/#qwiic-connectors","title":"Qwiic connectors","text":"<p>Our Qwiic Ecosystem makes sensors pretty much plug and play. There are two Qwiic connectors on the side of the Qwiic Distance Sensor board to provide power and I<sup>2</sup>C connectivity simultaneously. The default I<sup>2</sup>C address is 0x2F. The <code>updateAddress()</code> function allows you to change the I<sup>2</sup>C address to any address from 0x08 to 0x7F. More information on our Qwiic Ecosystem can be found here.  </p> <p></p> <p>Qwiic connectors</p>"},{"location":"single_page/#power","title":"Power","text":"<p>Ideally, power will be supplied via the Qwiic connectors on either side of the board. Alternatively, power can be supplied through the pins along the bottom side of the board labeled <code>3V3</code> and <code>GND</code>. The input voltage range should be between 1.8-3.6V. </p> <p></p> <p>Power Pins</p>"},{"location":"single_page/#trigger-and-echo-pins","title":"Trigger and Echo Pins","text":"<p>The Trigger and Echo pins are available as plated through holes to manually calculate the distance using the Ultrasonic Distance Sensor. To use, pull TRIG HIGH and then LOW, wait for the ECHO pin to go HIGH and then take the time in between to calculate the distance to the object. For more information on how this works, check out Example 3 in the Arduino Library. </p> <p></p> <p>Trigger and Echo Pins</p>"},{"location":"single_page/#testpoint-pads","title":"Testpoint Pads","text":"<p>We've provided a number of open pads on the back of the board:</p>"},{"location":"single_page/#i2c-pads","title":"I2C Pads","text":"<p>Should you wish to avoid using the Qwiic connectors, you can use these two pads (along with the power PTH pins) to still take advantage of the I<sup>2</sup>C communication protocols. </p> <p></p> <p>I<sup>2</sup>C Testpoint Pads</p>"},{"location":"single_page/#single-wire-interface-module-swim","title":"Single Wire Interface Module (SWIM)","text":"<p>SWIM, INT, and NRST are all part of the \"Single Wire Interface Module (SWIM)\" used for programming the onboard STM8 microcontroller and for most users, can be effectively ignored. For those who wish to dive into the deep end and tweak the firmware, these pads are available. Requirements include ST Visual Develop (the ST Progamming Software bundled with Visual Develop), a COSMIC compiler license, and a USB to SWIM adapter.</p> <p></p> <p>SWIM Testpoint Pads</p>"},{"location":"single_page/#addr_rst","title":"ADDR_RST","text":"<p>ADDR_RST resets the address to 0x2F. </p> <p></p> <p>ADDR_RST Testpoint Pad</p>"},{"location":"single_page/#jumpers","title":"Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p>      How to Work with Jumper Pads and PCB Traces </p></p>"},{"location":"single_page/#led-jumper","title":"LED Jumper","text":"<p>If you are concerned about power consumption, need to run dark, or you just don't like LEDs, cut the traces here to disconnect the Power LED from, you guessed it, power. </p> <p></p> <p>LED Jumper</p>"},{"location":"single_page/#i2c","title":"I<sup>2</sup>C","text":"<p>The Qwiic Ultrasonic Distance Sensor has built-in 2.2k pull-up resistors on the SDA and SCL lines. These are needed for normal I<sup>2</sup>C communication. The I<sup>2</sup>C jumper has two small traces connecting the pull-ups to 3.3V. For general use you can leave this jumper unmodified. If you have many (over 7) devices on the I<sup>2</sup>C bus, each with their own pull up resistors, then you may want to cut the I<sup>2</sup>C jumpers to disconnect the 2.2k resistors on each Qwiic board.</p> <p></p> <p>I<sup>2</sup>C jumper</p>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board dimensions are illustrated in the drawing below; the listed measurements are in inches.</p> <p></p> <p>SparkFun Ultrasonic Sensor Board Dimensions</p> Need more measurements? <p>For more information about the board's dimensions, users can download the Eagle files. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download fromAutodesk primary logo </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":"<p>Using the Qwiic system, assembling the hardware is simple. Connect the RedBoard to one of the Ultrasonic Distance Sensor Qwiic ports using your Qwiic cables. Then connect the RedBoard to your computer via the MicroUSB cable and voila! You're ready to rock! </p> <p></p> <p>Ultrasonic Distance Sensor Connected to Programming</p> <p>If you don't want to use the Qwiic system, there are Plated Through Holes on the side of the board that you can solder headers to. </p> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide.</p> <ul> <li> <p> <p>How to Solder: Through-Hole Soldering</p>"},{"location":"single_page/#software-setup","title":"Software Setup","text":"<p>Attention</p> <p>If this is your first time using Arduino, please review our tutorial on installing the Arduino IDE. If you have not previously installed an Arduino library, please check out our installation guide.</p> <p>SparkFun has written a library to work with the SparkFun Ultrasonic Distance Sensor Qwiic Board. You can obtain this library  by clicking on the button below, or by downloading it from the GitHub Repository.</p> <p> SparkFun Ultrasonic Distance Sensor Qwiic Arduino Library GitHub </p>"},{"location":"single_page/#arduino-example","title":"Arduino Example","text":"<p>Now that we've installed the Arduino library, it's time to upload our first sketch to make sure everything is working properly.</p>"},{"location":"single_page/#example-1","title":"Example 1","text":"<p>This first example just does some basic measurements. To find Example 1, go to File &gt; Examples &gt; SparkFun Qwiic Ultrasonic Arduino Library &gt; Example1_BasicReadings:</p> <p></p> <p>Finding Example 1</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch:</p> Example 1 Arduino Code <pre><code>/* SparkFun Ulrasonic Distance Sensor - Example 1 Basic Distance Sensing\n * \n * Product: \n *  *  SparkFun Qwiic Ultrasonic Distance Sensor - HC-SR04 (SEN-1XXXX)\n *  *  https://www.sparkfun.com/1XXXX\n * \n * Written By: Elias Santistevan\n * Date: 06/2024\n *\n * SPDX-License-Identifier: MIT\n *\n * Copyright (c) 2024 SparkFun Electronics\n */\n\n#include \"SparkFun_Qwiic_Ultrasonic_Arduino_Library.h\"\n\n// Create an ultrasonic sensor object\nQwiicUltrasonic myUltrasonic;\n\n// Here we set the device address. Note that an older version of the Qwiic\n// Ultrasonic firmware used a default address of 0x00. If yours uses 0x00,\n// you'll need to change the address below. It is also recommended to run\n// Example 2 to change the address to the new default.\nuint8_t deviceAddress = kQwiicUltrasonicDefaultAddress; // 0x2F\n// uint8_t deviceAddress = 0x00;\n\nvoid setup()\n{\n  // Start serial\n  Serial.begin(115200);\n  Serial.println(\"Ultrasonic Distance Sensor Example 1 - Basic Readings\");\n\n  Wire.begin();\n\n  // Attempt to begin the sensor\n  while (myUltrasonic.begin(deviceAddress) == false)\n  {\n    Serial.println(\"Ultrasonic sensor not connected, check your wiring and I2C address!\");\n    delay(2000);\n  }\n\n  Serial.println(\"Ultrasonic sensor connected!\");\n}\n\nvoid loop()\n{\n  uint16_t distance = 0;\n  myUltrasonic.triggerAndRead(distance);\n\n  // Print measurement\n  Serial.print(\"Distance (mm): \");\n  Serial.println(distance);\n\n  //Serial.println(\"Distance (cm): \"); \n  //Serial.print((distance / 10.0), 2);         \n\n  //Serial.println(\"Distace (in): \"); \n  //Serial.print((distance / 25.4), 2);         \n\n  // Wait a bit\n  delay(250);\n}\n</code></pre> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following.</p> <p></p> <p>Example 1 Output</p> <p>Note the output change when the mouse is moved closer to the sensor.</p>"},{"location":"single_page/#example-2","title":"Example 2","text":"<p>Let's add in an LCD screen to display our measurements. For this example you will need another Qwiic Cable and the SparkFun Qwiic OLED Display (0.91 in., 128x32).</p> <p>To display the sensor readings on the connected Qwiic OLED, we will need to install the SparkFun Qwiic OLED library. You can install this library to automatically in the Arduino IDE's Library Manager by searching for \"SparkFun Qwiic OLED\". Or you can manually download it from the GitHub repository.</p> <p> Download the SparkFun Qwiic OLED Library (ZIP) </p> <p>To find Example 2, go to File &gt; Examples &gt; SparkFun Qwiic Ultrasonic Arduino Library &gt; Example2_OLED_Distance:</p> <p></p> <p>Finding Example 2</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch:</p> Example 2 Arduino Code <pre><code>/* SparkFun Ulrasonic Distance Sensor - Example 2 Basic Distance Sensing on an OLED Display\n * \n * Products: \n *  *  SparkFun Qwiic Ultrasonic Distance Sensor - HC-SR04 (SEN-1XXXX)\n *  *  https://www.sparkfun.com/1XXXX\n *  *  SparkFun Qwiic Narrow OLED Display (LCD-1XXXX)\n *  *  https://www.sparkfun.com/1XXXX\n *\n * Link to OLED library: https://github.com/sparkfun/SparkFun_Qwiic_OLED_Arduino_Library\n * \n * Written By: Elias Santistevan\n * Date: 06/2024\n *\n * SPDX-License-Identifier: MIT\n *\n * Copyright (c) 2024 SparkFun Electronics\n */\n\n#include \"SparkFun_Qwiic_OLED.h\"\n// For the narrow LED, I prefer the slightly larger font included in the OLED library.\n// This is completely optional and can be deleted or commented out. By default the font\n// is slightly smaller. \n#include \"res/qw_fnt_8x16.h\"\n#include \"SparkFun_Qwiic_Ultrasonic_Arduino_Library.h\"\n\n// Create an ultrasonic sensor object\nQwiicUltrasonic myUltrasonic;\n// Creat an OLED object\nQwiicNarrowOLED myOLED;\n\nchar distanceBuff[4] = {}; \nString distanceStr = \"\";\nint centerX; \nint centerY; \n\n// Here we set the device address. Note that an older version of the Qwiic\n// Ultrasonic firmware used a default address of 0x00. If yours uses 0x00,\n// you'll need to change the address below. It is also recommended to run\n// Example 2 to change the address to the new default.\nuint8_t deviceAddress = kQwiicUltrasonicDefaultAddress; // 0x2F\n// uint8_t deviceAddress = 0x00;\n\nvoid setup()\n{\n\n  Serial.begin(115200); // Default config settings\n  Serial.println(\"Ultrasonic Distance Sensor - Example 4 - Distance on an OLED Display\");\n  Wire.begin();\n\n  while (myOLED.begin() == false) {\n    Serial.println(\"OLED sensor not connected, check your wiring and I2C address!\");\n    delay(1000);\n  }\n  while(myUltrasonic.begin(deviceAddress) == false)\n  {\n    Serial.println(\"Ultrasonic sensor not connected, check your wiring and I2C address!\");\n    delay(1000);\n  }\n\n  String hello = \"Hello, Ultrasonic!\";\n\n  // This is good for the narrow OLED screen. You can also just remove this \n  // and it will default to a slightly smaller font. \n  myOLED.setFont(QW_FONT_8X16);\n\n  // This will center the text onto the screen. \n  int x0 = (myOLED.getWidth() - myOLED.getStringWidth(hello)) / 2;\n  int y0 = (myOLED.getHeight() - myOLED.getStringHeight(hello)) / 2;\n\n  myOLED.text(x0, y0, hello);\n\n  // There's nothing on the screen yet - Now send the graphics to the device\n  myOLED.display();\n  delay(2000);\n}\n\nvoid loop() \n{\n  uint16_t distance = 0;\n  myUltrasonic.triggerAndRead(distance);\n\n  // Convert distance, which is an integer, to char so that we can print it.\n  snprintf(distanceBuff, 6, \"%d\", distance);\n\n  // Put the distance in a string so that we can also print \"mm\".\n  distanceStr = distanceBuff; \n  distanceStr += \"mm\";\n\n  myOLED.erase();\n  centerX = (myOLED.getWidth() - myOLED.getStringWidth(distanceStr)) / 2;\n  centerY = (myOLED.getHeight() - myOLED.getStringHeight(distanceStr)) / 2;\n  myOLED.text(centerX, centerY, distanceStr);\n  myOLED.display();\n\n  delay(250);\n}\n</code></pre> <p>We have code, now let's hookup the hardware! The Qwiic system makes this example quite literally plug and play. Use Qwiic cables to make your hardware setup look like this:</p> <p></p> <p>Example 2 Hardware Hookup</p> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, you should see something similar to the following.</p> <p></p> <p>Run away!</p> <p>Try moving an object (like your hand or a dinosaur) closer to the sensor - notice the output of the OLED shows you how close the object is! Grr. Rawr!</p>"},{"location":"single_page/#going-further","title":"Going Further","text":"<p>There are more examples in the Arduino Library that allow you to change the I<sup>2</sup>C address or use the Trigger and Echo Pins. Feel free to check them out!</p>"},{"location":"single_page/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"single_page/#resources","title":"Resources:","text":"<p>For more resources related to the SparkFun Ultrasonic Distance Sensor - TCT40 (Qwiic), check out the links listed here: </p> <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PDF)</li> <li>Component Documentation<ul> <li>STM8L051F3 MCU Datasheet (PDF)</li> <li>TCT40-16R/T Datasheet (PDF)</li> <li>RS232 transceiver Datasheet (PDF)</li> </ul> </li> <li>Arduino Library GitHub Repository</li> <li>GitHub Hardware Respository</li> </ul>"},{"location":"software_setup_and_programming/","title":"Software Setup","text":"<p>Attention</p> <p>If this is your first time using Arduino, please review our tutorial on installing the Arduino IDE. If you have not previously installed an Arduino library, please check out our installation guide.</p> <p>SparkFun has written a library to work with the SparkFun Ultrasonic Distance Sensor Qwiic Board. You can obtain this library  by clicking on the button below, or by downloading it from the GitHub Repository.</p> <p> SparkFun Ultrasonic Distance Sensor Qwiic Arduino Library GitHub </p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Ultrasonic Distance Sensor - TCT40 (Qwiic) repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Ultrasonic Distance Sensor - TCT40 (Qwiic) repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Ultrasonic Distance Sensor - TCT40 (Qwiic) repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Ultrasonic Distance Sensor - TCT40 (Qwiic) repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"}]}